
*Ever noticed how, in "Google Earth":http://earth.google.com, marker pins that overlap each other spring apart gracefully when you click them, so you can pick the one you meant?*

*And ever noticed how, when using the "Google Maps API":http://code.google.com/apis/maps/documentation/javascript/, the same thing doesn't happen?*

This code makes Google Maps API *version 3* map markers behave in that Google Earth way (minus, at least as yet, the snazzy animation). Small numbers of markers (yes, up to 8) spiderfy into a circle. Larger numbers fan out into a more space-efficient spiral.

The compiled code has no dependencies (except Google Maps), so you can use it with any library. And it's just 1.7K when compiled out of "CoffeeScript":http://jashkenas.github.com/coffee-script/, minified with Google's "Closure Compiler":http://code.google.com/closure/compiler/) and gzipped.

I wrote it as part of the data download feature for "Mappiness":http://www.mappiness.org.uk.

h3. Doesn't clustering solve this problem?

You may have seen the "marker clustering library":http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/1.0/docs/reference.html, which also helps deal with markers that are close together.

That might be what you want. However, it probably *isn't* what you want if you have markers that are in the exact same location, or are close enough to overlap even at the maximum zoom level. In that case, clustering won't help your users pick out (and find out more about) the marker they want.

h2. Demo

See the (sorry, kinda boring) "demo map":http://jawj.github.com/OverlappingMarkerSpiderfier/demo.html.

h2. How to use

This how-to is in CoffeeScript, but obviously it'll work from plain old regular JavaScript too. 

Create your map like normal:

bc. gm = google.maps
map = new gm.Map(
  document.getElementById('map_canvas'), 
  mapTypeId: gm.MapTypeId.SATELLITE,
  center: new gm.LatLng(50, 0), zoom: 6
)

Create an @OverlappingMarkerSpiderfier@ instance:

bc. oms = new OverlappingMarkerSpiderfier(map)

Instead of adding click listeners to your markers directly via @google.maps.event.addListener@, add a global listener on the @OverlappingMarkerSpiderfier@ instance instead. The listener will be passed the clicked marker as its first argument.

bc. iw = new gm.InfoWindow()
oms.addListener 'click', (marker) ->
  iw.setContent(marker.desc)
  iw.open(map, marker)
  
You can also add listeners on the @spiderfy@ and @unspiderfy@ events, which will be passed an array of the markers affected. In this example, we observe only the @spiderfy@ event, using it to close any open @InfoWindow@:
  
bc. oms.addListener 'spiderfy', (markers) -> 
  iw.close()

Finally, tell the @OverlappingMarkerSpiderfier@ instance about each marker as you add it:

bc. for datum in window.mapData
  marker = new gm.Marker 
    position: new gm.LatLng(datum.lat, datum.lon)
    title: datum.h
    map: map
  marker.desc = datum.d
  oms.addMarker(marker)

h2. Docs

So, in summary:

h3. Construction

bc. new OverlappingMarkerSpiderfier(map)

Creates an instance associated with @map@ (a @google.maps.Map@).

h3. Instance methods

bc. addMarker(marker)

Adds @marker@ (a @google.maps.Marker@) to be tracked.

bc. addListener(event, listenerFunc)

Adds a listener to react to one of three events.

@event@ may be @'click'@, @'spiderfy'@ or @'unspiderfy'@.

@listenerFunc@ will receive as its argument a single marker object (@click@) or an array thereof (@spiderfy@ and @unspiderfy@).

h2. Options

There are options regarding colours and distances, but at present you'll need to re-build the CoffeeScript source to set them. This may change in future.

