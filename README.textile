
Ever noticed how, in "Google Earth":http://earth.google.com, marker pins that overlap each other spring apart gracefully when you click them, so you can pick the one you meant?

And ever noticed how, when using the "Google Maps API":http://code.google.com/apis/maps/documentation/javascript/, the same thing *doesn't* happen?

This code makes Google Maps API map markers behave in that Google Earth way (minus, at least as yet, the snazzy animation).

It has no dependencies (except Google Maps), so you can use it with any library. And it's just 1.7K when CoffeeScript-compiled, minified (with "Google Closure Compiler":http://code.google.com/closure/compiler/) and gzipped.

I wrote it as part of the data download feature for "Mappiness":http://www.mappiness.org.uk.

h2. Demo

Try it on the (sorry, kind-of-boring) "demo map":http:http://jawj.github.com/OverlappingMarkerSpiderfier/demo.html.

h2. Usage

This example is in CoffeeScript. Create your map like normal:

bc. gm = google.maps
map = new gm.Map(
  document.getElementById('map_canvas'), 
  mapTypeId: gm.MapTypeId.SATELLITE,
  center: new gm.LatLng(50, 0), zoom: 6  # whatevs: fitBounds will override
)
iw = new gm.InfoWindow()

Create an @OverlappingMarkerSpiderfier@ instance:

bc. oms = new OverlappingMarkerSpiderfier(map)

Instead of adding click listeners to your markers directly via @google.maps.event.addListener@, add a global listener on the @OverlappingMarkerSpiderfier@ instance instead. This listener will be passed the clicked marker as its first argument.

bc. oms.addListener 'click', (marker) ->
  iw.setContent(marker.desc)
  iw.open(map, marker)
  
You can also add listeners for the @spiderfy@ and @unspiderfy@ events, which are each passed an array of the markers affected. In this example, we observe only the @spiderfy@ event, using it to close any open InfoWindow:
  
bc. oms.addListener 'spiderfy', (markers) -> 
  iw.close()

Finally, tell the @OverlappingMarkerSpiderfier@ instance about each marker as you add it:

bc. for datum in window.mapData
  marker = new gm.Marker 
    position: new gm.LatLng(datum.lat, datum.lon)
    title: datum.h
    map: map
  marker.desc = datum.d
  oms.addMarker(marker)

h2. Options

There are options for just about everything, but at present you'll need to re-build the CoffeeScript source to set them. This may change in future.

