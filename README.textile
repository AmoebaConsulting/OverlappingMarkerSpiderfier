*Ever noticed how, in "Google Earth":http://earth.google.com, marker pins that overlap each other spring apart gracefully when you click them, so you can pick the one you meant?*

*And ever noticed how, when using the "Google Maps API":http://code.google.com/apis/maps/documentation/javascript/, the same thing doesn't happen?*

This code makes Google Maps API *version 3* map markers behave in that Google Earth way (minus, at least as yet, the snazzy animation). Small numbers of markers (yes, up to 8) spiderfy into a circle. Larger numbers fan out into a more space-efficient spiral.

The compiled code has no dependencies (except Google Maps), so you can use it with any library. And it's under 3K when compiled out of "CoffeeScript":http://jashkenas.github.com/coffee-script/, minified with Google's "Closure Compiler":http://code.google.com/closure/compiler/ and gzipped.

I wrote it as part of the data download feature for "Mappiness":http://www.mappiness.org.uk.

h3. Doesn't clustering solve this problem?

You may have seen the "marker clustering library":http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/1.0/docs/reference.html, which also helps deal with markers that are close together.

That might be what you want. However, it probably *isn't* what you want if you have markers that are in the exact same location, or are close enough to overlap even at the maximum zoom level. In that case, clustering won't help your users pick out (and find out more about) the marker they want.

h2. Demo

See the "demo map":http://jawj.github.com/OverlappingMarkerSpiderfier/demo.html (the data is random: reload the map to reposition the markers).

h2. Download

Download "the compiled, minified JS source":http://jawj.github.com/OverlappingMarkerSpiderfier/bin/oms.min.js.

Note: I recommend you use API version 3.3. At the time of writing, versions 3.4 and 3.5 appear to have broken handling of marker z-indices.

h2. How to use

See the "demo map source":/jawj/OverlappingMarkerSpiderfier/blob/gh-pages/demo.html, or follow along here for a slightly simpler usage with commentary.

Create your map like normal:

bc. var gm = google.maps;
var map = new gm.Map(document.getElementById('map_canvas'), {
  mapTypeId: gm.MapTypeId.SATELLITE,
  center: new gm.LatLng(50, 0), zoom: 6  // whatevs: fitBounds will override
});

Create an @OverlappingMarkerSpiderfier@ instance:

bc. var oms = new OverlappingMarkerSpiderfier(map);

Instead of adding click listeners to your markers directly via @google.maps.event.addListener@, add a global listener on the @OverlappingMarkerSpiderfier@ instance instead. The listener will be passed the clicked marker as its first argument.

bc. var iw = new gm.InfoWindow();
oms.addListener('click', function(marker) {
  iw.setContent(marker.desc);
  iw.open(map, marker);
});
  
You can also add listeners on the @spiderfy@ and @unspiderfy@ events, which will be passed an array of the markers affected. In this example, we observe only the @spiderfy@ event, using it to close any open @InfoWindow@:
  
bc. oms.addListener('spiderfy', function(markers) {
  iw.close();
});

Finally, tell the @OverlappingMarkerSpiderfier@ instance about each marker as you add it, using the @addMarker@ method:

bc. var bounds = new gm.LatLngBounds();
for (var i = 0; i < window.mapData.length; i ++) {
  var datum = window.mapData[i];
  var loc = new gm.LatLng(datum.lat, datum.lon);
  bounds.extend(loc);
  var marker = new gm.Marker({
    position: loc,
    title: datum.h,
    map: map
  });
  marker.desc = datum.d;
  oms.addMarker(marker);  // <-- here
}
map.fitBounds(bounds);

h2. Docs

So, in summary:

h3. Construction

bc. new OverlappingMarkerSpiderfier(map)

Creates an instance associated with @map@ (a @google.maps.Map@).

h3. Instance methods

bc. addMarker(marker)

Adds @marker@ (a @google.maps.Marker@) to be tracked.

bc. removeMarker(marker)

Removes @marker@ (a @google.maps.Marker@) from those being tracked.

bc. addListener(event, listenerFunc)

Adds a listener to react to one of three events.

@event@ may be @'click'@, @'spiderfy'@ or @'unspiderfy'@.

@listenerFunc@ will receive as its argument a single marker object (@click@) or an array thereof (@spiderfy@ and @unspiderfy@).

h3. Properties

There are various properties you can set on an @OverlappingMarkerSpiderfier@ instance. The most useful are probably:

@nearbyDistance@, which is the pixel radius within which a marker is considered to be overlapping a clicked marker. Default: @20@.

@circleSpiralSwitchover@, which is the lowest number of markers that will be fanned out into a spiral instead of a circle. Set this to @0@ to always get spirals, or @Infinity@ for all circles. Default: @9@.

@legWeight@, which determines the thickness of the lines joining spiderfied markers to their original locations. Default: @1.5@.

@legColors.usual[mapType]@ and @legColors.highlighted[mapType]@, which determine the usual and highlighted colours of those lines, where @mapType@ is one of the @google.maps.MapTypeId@ constants. Defaults:

bc. legColors.usual[google.maps.MapTypeId.HYBRID] = legColors.usual[google.maps.MapTypeId.SATELLITE] = '#fff'
legColors.usual[google.maps.MapTypeId.TERRAIN] = legColors.usual[google.maps.MapTypeId.ROADMAP] = '#444'
legColors.highlighted[google.maps.MapTypeId.HYBRID] = legColors.highlighted[google.maps.MapTypeId.SATELLITE] = 
  legColors.highlighted[google.maps.MapTypeId.TERRAIN] = legColors.highlighted[google.maps.MapTypeId.ROADMAP] = '#f00'

h2. Licence

This software is released under the "MIT licence":http://www.opensource.org/licenses/mit-license.php.